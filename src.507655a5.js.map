{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["taskDelay","document","querySelector","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","taskToggleUserState","users","name","active","toggleUserState","allUsers","userName","callback","updatedUsers","map","user","table","taskMakeTransaction","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.507655a5.js","sourceRoot":"../src","sourcesContent":["const taskDelay = document.querySelector('.task-1');\nconst delay = ms => {\n  // Твой код\n     return new Promise(resolve => {\n        setTimeout(() => resolve(ms), ms);\n    });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","const taskToggleUserState = document.querySelector('.task-2')\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n    return Promise.resolve(updatedUsers);\n  //callback(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const taskMakeTransaction = document.querySelector('.task-3');\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import './sass/main.scss';\nimport './js/task-1';\nimport './js/task-2';\nimport './js/task-3';"]}